<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="         http://www.osgi.org/xmlns/blueprint/v1.0.0          https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">
    <!-- 
      blueprint property placeholders, that will use etc/camel.activemq.blueprint.cfg 
      as the properties file with content like.       
        amq.url      = ${activemq.url}
        amq.username = ${activemq.username}
        amq.password = ${activemq.password}
    -->
    <cm:property-placeholder id="camel.activemq.blueprint" persistent-id="camel.activemq.blueprint">
        <cm:default-properties>
            <cm:property name="broker.url" value="vm://amq?broker.persistent=false"/>
            <cm:property name="broker.username" value="admin"/>
            <cm:property name="broker.password" value="nimda"/>
        </cm:default-properties>
    </cm:property-placeholder>
    <!-- 
         Lets connect the Camel ActiveMQ component to the broker.
    -->
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="activemq">
        <property name="brokerURL" value="${broker.url}"/>
        
        <property name="userName" value="${broker.username}"/>
        <property name="password" value="${broker.password}"/>
        
        <property name="usePooledConnection" value="false"/>
    </bean>
    <!--
        The namespace for the camelContext element in Blueprint is 'http://camel.apache.org/schema/blueprint'. 
        Additionally,  we can also define namespace prefixes we want to use them 
        in the XPath expressions in our CBR.

        While it is not required to assign id's to the <camelContext/> and <route/> 
        elements, it is a good idea to set those for runtime management purposes 
        (logging, JMX MBeans, ...)
    -->
    <camelContext id="amq-example-context"
        xmlns="http://camel.apache.org/schema/blueprint"
        xmlns:order="http://com.mycompany/examples/order"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://camel.apache.org/schema/blueprint">
        <endpoint id="json_idoc_purchaseOrder" uri="dozer:json_idoc_purchaseOrder?sourceModel=orderrequest.OrderRequest&amp;targetModel=generated_1490874398211.ORDERS05&amp;marshalId=generated_1490874398211&amp;unmarshalId=orderrequestOrderRequest&amp;mappingFile=transformation.xml"/>
        <dataFormats>
            <json id="orderrequestOrderRequest" library="Jackson" unmarshalTypeName="orderrequest.OrderRequest"/>
            <jaxb contextPath="generated_1490874398211" id="generated_1490874398211"/>
        </dataFormats>
        <route id="file-to-jms-route">
            <from id="incomingFolder" uri="file:work/in/hybris/order"/>
            <log id="logReceivingOrder" message="Receiving order ${file:name}"/>
            <to id="fileToQueueProcessOrder" uri="activemq:dynamicQueues/pub/outbound/order/processOrderTrg"/>
        </route>
        <route id="hybris-sap-purchaseOrder-route">
            <from id="hybris-purchaseOrder-queue" uri="activemq:dynamicQueues/pub/outbound/order/processOrderTrg"/>
            <wireTap id="inHybrisOrderWireTap" uri="file:work/intermediate/order/beforeTransformation">
                <body>
                    <simple trim="false">${body}</simple>
                </body>
            </wireTap>
            <to id="transform_purchaseOrder" uri="ref:json_idoc_purchaseOrder"/>
            <wireTap id="outSapOrderWiretap" uri="file:work/intermediate/order/afterTransformation">
                <body>
                    <simple>${body}</simple>
                </body>
            </wireTap>
            <to id="jmsSapOrder" uri="file:work/out/sap/order"/>
        </route>
    </camelContext>
</blueprint>
